# Generated by Django 4.2.3 on 2023-08-17 11:40

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Professeur',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Nom')),
                ('categorie', models.CharField(choices=[("Personnel de ministre de l'enseignement supérieur", "Personnel de ministre de l'enseignement supérieur")], max_length=120)),
                ('corps', models.CharField(choices=[("Corps des enseignants chercheurs de l'enseignement supérieur", "Corps des enseignants chercheurs de l'enseignement supérieur"), ("Enseignant chercheurs de l'enseignement supérieur", "Enseignant chercheurs de l'enseignement supérieur"), ('Enseignants chercheurs de la médecine, la pharmacie et de médecine dentaire-NS', 'Enseignants chercheurs de la médecine, la pharmacie et de médecine dentaire-NS')], max_length=120)),
                ('cadre', models.CharField(choices=[("Professeur de l'enseignement supérieur", "Professeur de l'enseignement supérieur"), ('Professeur habilite', 'Professeur habilite'), ('Professeur assistant', 'Professeur assistant'), ('Professeur agrégé', 'Professeur agrégé')], max_length=120)),
                ('grade', models.CharField(choices=[('Grade A', 'Grade A'), ('Grade B', 'Grade B'), ('Grade C', 'Grade C'), ('Grade D', 'Grade D')], max_length=120)),
                ('indice_echelon', models.CharField(choices=[('760-01', '760-01'), ('785-02', '785-02'), ('810-03', '810-03'), ('835-04', '835-04'), ('580-01', '580-01'), ('620-02', '620-02'), ('660-03', '660-03'), ('720-04', '720-04'), ('509-01', '509-01'), ('542-02', '542-02'), ('574-03', '574-03'), ('606-04', '606-04'), ('760-05', '760-05'), ('785-06', '785-06'), ('810-07', '810-07'), ('835-08', '835-08'), ('509-09', '509-09'), ('542-10', '542-10'), ('574-11', '574-11'), ('606-12', '606-12')], max_length=120)),
                ('region', models.CharField(choices=[('Région Tanger-Tétouan-Al hoceima', 'Région Tanger-Tétouan-Al hoceima'), ("Région l'Oriental", "Région l'Oriental"), ('Région Fès-Meknès', 'Région Fès-Meknès'), ('Région Rabat-Salé-Kénitra', 'Région Rabat-Salé-Kénitra'), ('Région Béni Mellal-Khénifra', 'Région Béni Mellal-Khénifra'), ('Région Casablanca-Settat', 'Région Casablanca-Settat')], max_length=120, verbose_name='Région')),
                ('localite', models.CharField(choices=[("Province d'Alhoceima (zone A)", "Province d'Alhoceima (zone A)"), ('Province de chaouèn (zone B)', 'Province de chaouèn (zone B)'), ("Province d'Ouezzane (zone B)", "Province d'Ouezzane (zone B)"), ('Province Tanger-Assillah (zone C)', 'Province Tanger-Assillah (zone C)'), ('Province de Fahs-Anjra (zone C)', 'Province de Fahs-Anjra (zone C)'), ('Province de Tétouan (zone C)', 'Province de Tétouan (zone C)'), ("Préfecture de M'diq-Fnideq (zone C)", "Préfecture de M'diq-Fnideq (zone C)"), ('Province de Larache (zone C)', 'Province de Larache (zone C)'), ('Province de Figuig (zone A)', 'Province de Figuig (zone A)'), ('Province de Gercif (zone B)', 'Province de Gercif (zone B)'), ('Province de Jerada (zone B)', 'Province de Jerada (zone B)'), ('Province de Berkane (zone B)', 'Province de Berkane (zone B)'), ('Province de Taourirt (zone B)', 'Province de Taourirt (zone B)'), ('Province de Nador (zone B)', 'Province de Nador (zone B)'), ('Province de Driouch (zone B)', 'Province de Driouch (zone B)'), ("Préfecture d'Oujda-Angad (zone B)", "Préfecture d'Oujda-Angad (zone B)"), ('Province de Boulemane (zone A)', 'Province de Boulemane (zone A)'), ("Province d'Ifrane (zone A)", "Province d'Ifrane (zone A)"), ('Aderj,Ribate EL Kheir,lmouzzer Kandar,Ait Sebaa Lajrouf,lghezrane,Tafajight,Dar El Hamra (Province de Sefrou)(zone A)', 'Aderj,Ribate EL Kheir,lmouzzer Kandar,Ait Sebaa Lajrouf,lghezrane,Tafajight,Dar El Hamra (Province de Sefrou)(zone A)'), ('Province de Berkane (zone B)', 'Province de Berkane (zone B)'), ('Province de Taourirt (zone B)', 'Province de Taourirt (zone B)'), ('Province de Nador (zone B)', 'Province de Nador (zone B)'), ('Province de Driouch (zone B)', 'Province de Driouch (zone B)'), ("Préfecture d'Oujda-Angad (zone B)", "Préfecture d'Oujda-Angad (zone B)"), ('Préfecture de Rabat (zone C)', 'Préfecture de Rabat (zone C)'), ('Préfecture de Salé (zone C)', 'Préfecture de Salé (zone C)'), ('Préfecture de Skhirate-Témara (zone C)', 'Préfecture de Skhirate-Témara (zone C)'), ('Province de Khemisset (zone C)', 'Province de Khemisset (zone C)'), ('Province de Kenitra (zone C)', 'Province de Kenitra (zone C)'), ('Province de Sidi Kacem (zone C)', 'Province de Sidi Kacem (zone C)'), ('Province de Sidi Slimane (zone C)', 'Province de Sidi Slimane (zone C)'), ("Province d'Azilal (zone A)", "Province d'Azilal (zone A)"), ('Province de Khénifra (zone A)', 'Province de Khénifra (zone A)'), ('Naour,Boutferda , Tizi Nisly,Aghbala,Foum El-Ansar,Tanougha,Taghzirt,Foum Oudi,Dir El Ksiba,Ait Oum El Bakht(zone B)', 'Naour,Boutferda , Tizi Nisly,Aghbala,Foum El-Ansar,Tanougha,Taghzirt,Foum Oudi,Dir El Ksiba,Ait Oum El Bakht(zone B)'), ('Province de Fquih Ben Salah (zone B)', 'Province de Fquih Ben Salah (zone B)'), ('Province de Khouribga (zone C)', 'Province de Khouribga (zone C)'), ('Préfecture de Casablanca (zone C)', 'Préfecture de Casablanca (zone C)'), ('Préfecture de Mohammedia (zone C)', 'Préfecture de Mohammedia (zone C)'), ('Province Nouaceur (zone C)', 'Province Nouaceur (zone C)'), ('Province Médiouna (zone C)', 'Province Médiouna (zone C)'), ("Province d'El-Jadida (zone C)", "Province d'El-Jadida (zone C)"), ('Province de Sidi Bennour (zone C)', 'Province de Sidi Bennour (zone C)'), ('Province de Settat (zone C)', 'Province de Settat (zone C)'), ('Province de Benslimane (zone C)', 'Province de Benslimane (zone C)'), ('Province de Berrechid (zone C)', 'Province de Berrechid (zone C)')], max_length=120, verbose_name='Localité')),
                ('mutuelle', models.CharField(choices=[('MGPAP', 'MGPAP'), ('MGEN', 'MGEN'), ('DOUANES', 'DOUANES'), ('POLICE', 'POLICE'), ('F.AUX', 'F.AUX'), ('OMFAM', 'OMFAM')], max_length=120)),
                ('est_marie', models.BooleanField(choices=[(True, 'Marié'), (False, 'Célibataire')], default=True, verbose_name='Situation Faimilial')),
                ('nombre_enfants', models.IntegerField(choices=[(0, '0'), (1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (6, '6')], default=0, verbose_name="Nombre d'enfants")),
                ('traitement_base', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('indemnite_residence', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('total_indemnites', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('allocation_medicale', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('indemnite_encadrement', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('indemnite_risque', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('cotisation_mutuelle', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('amo', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('secteur_mutualiste', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('ccd', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('total_cotisations', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('impot_revenu', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('salaire_brut', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('salaire_net_imposable', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('total_revenus', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('salaire_net', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Rubrique',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('libele_rubrique', models.CharField(max_length=255)),
                ('montant_mensuel', models.DecimalField(decimal_places=2, max_digits=10)),
            ],
        ),
    ]
